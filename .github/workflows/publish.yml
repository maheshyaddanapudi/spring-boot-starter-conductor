name: Publish to Maven Central

on:
  push:
    branches:
      - main  # Update this to your main branch if needed

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      OSSRH_HTOKEN: ${{ secrets.OSSRH_HTOKEN }}
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Generate the base64-encoded token
      - name: Generate base64-encoded token
        run: |
          echo "::add-mask::${{ secrets.OSSRH_USERNAME }}"
          echo "::add-mask::${{ secrets.OSSRH_PASSWORD }}"
          ENCODED_TOKEN=$(printf "%s:%s" "${{ secrets.OSSRH_USERNAME }}" "${{ secrets.OSSRH_PASSWORD }}" | base64 | tr -d '\n')
          echo "OSSRH_TOKEN=$ENCODED_TOKEN" >> $GITHUB_ENV
        shell: bash

      # Generate a new GPG key pair
      - name: Generate GPG key
        run: |
          echo -e "Key-Type: default\nKey-Length: 2048\nSubkey-Type: default\nName-Real: GitHub Actions\nName-Email: actions@github.com\nExpire-Date: 0\nPassphrase: ${GPG_PASSPHRASE}\n%commit\n%echo done" > gen-key-script
          gpg --batch --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE}" --generate-key gen-key-script
          rm gen-key-script
          gpg --list-secret-keys --keyid-format LONG
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        shell: bash

      # Export the GPG key ID
      - name: Extract GPG key ID
        id: gpg
        run: |
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep '^sec' | head -n1 | awk '{print $2}' | cut -d'/' -f2)
          echo "KEY_ID=$KEY_ID" >> $GITHUB_ENV
        shell: bash

      # Configure GPG to use loopback pinentry
      - name: Configure GPG
        run: |
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          gpgconf --kill gpg-agent
        shell: bash

      # Set up Gradle properties
      - name: Set up gradle.properties
        run: |
          mkdir -p ~/.gradle
          GPG_DIR=$(gpgconf --list-dirs homedir)   # Get GPG home directory
          gpg --batch --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE}" --export-secret-keys --armor "$KEY_ID" > secring.gpg
          
          echo "mavenCentralUsername=${OSSRH_USERNAME}" >> ~/.gradle/gradle.properties
          echo "mavenCentralPassword=${OSSRH_PASSWORD}" >> ~/.gradle/gradle.properties
          echo "signing.keyId=${KEY_ID}" >> ~/.gradle/gradle.properties
          echo "signing.password=${GPG_PASSPHRASE}" >> ~/.gradle/gradle.properties
          echo "signing.secretKeyRingFile=$(pwd)/secring.gpg" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.executable=gpg" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.keyName=$KEY_ID" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.passphrase=${GPG_PASSPHRASE}" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.useLegacyGpg=false" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.options=--pinentry-mode loopback" >> ~/.gradle/gradle.properties
        env:
          KEY_ID: ${{ env.KEY_ID }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_HTOKEN }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        shell: bash

      # Set up JDK 17 (moved below GPG key generation)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Grant execute permission for Gradle wrapper
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      # Build and publish to Maven Central
      - name: Build and publish
        run: ./gradlew clean build publishAndReleaseToMavenCentral --no-daemon --stacktrace
        env:
          OSSRH_TOKEN: ${{ env.OSSRH_HTOKEN }}

      # Clean up GPG keys
      - name: Clean up GPG keys
        run: |
          gpg --batch --yes --delete-secret-keys $KEY_ID
          gpg --batch --yes --delete-keys $KEY_ID
        env:
          KEY_ID: ${{ env.KEY_ID }}
        shell: bash
