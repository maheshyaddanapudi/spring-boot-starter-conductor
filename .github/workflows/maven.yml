name: Publish to Maven Central

on:
  push:
    branches:
      - main  # Update this to your main branch if needed

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      OSSRH_HTOKEN: ${{ secrets.OSSRH_HTOKEN }}
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Generate a new GPG key pair
      - name: Generate GPG key
        run: |
          echo -e "Key-Type: default\nKey-Length: 2048\nSubkey-Type: default\nName-Real: GitHub Actions\nName-Email: actions@github.com\nExpire-Date: 0\nPassphrase: ${GPG_PASSPHRASE}\n%commit\n%echo done" > gen-key-script
          gpg --batch --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE}" --generate-key gen-key-script
          rm gen-key-script
          gpg --list-secret-keys --keyid-format LONG
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        shell: bash

      # Export the GPG key ID
      - name: Extract GPG key ID
        id: gpg
        run: |
          KEY_ID=$(gpg --list-secret-keys --keyid-format short | grep 'sec' | head -n1 | awk '{print $2}' | cut -d'/' -f2)
          echo "KEY_ID=$KEY_ID" >> $GITHUB_ENV
        shell: bash

      # Set up JDK 17
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      # Configure GPG to use loopback pinentry
      - name: Configure GPG
        run: |
          GPG_DIR=$(gpgconf --list-dirs homedir)   # Get GPG home directory
          ls -lrt $GPG_DIR
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "no-ask-cert-level" >> ~/.gnupg/gpg.conf  
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          gpgconf --kill gpg-agent
        env:
          KEY_ID: ${{ env.KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        shell: bash

      # Set up GPG and secring.gpg for signing
      - name: Create secring.gpg
        run: |
          export GPG_TTY=$(tty)
          gpg --batch --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --export-secret-keys --armor > ~/.gnupg/secring.gpg
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_TTY: ${{ env.GPG_TTY }}


      # Set up Gradle properties
      - name: Set up gradle.properties
        run: |
          mkdir -p ~/.gradle
          echo "signing.keyId=${{ env.KEY_ID }}" >> ~/.gradle/gradle.properties
          echo "signing.password=${{ secrets.GPG_PASSPHRASE }}" >> ~/.gradle/gradle.properties
          echo "signing.secretKeyRingFile=~/.gnupg/secring.gpg" >> ~/.gradle/gradle.properties
          echo "ossrhUsername=${{ secrets.OSSRH_USERNAME }}" >> ~/.gradle/gradle.properties
          echo "ossrhPassword=${{ secrets.OSSRH_PASSWORD }}" >> ~/.gradle/gradle.properties
          cat ~/.gradle/gradle.properties
        env:
          KEY_ID: ${{ env.KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        shell: bash

      # Grant execute permission for Gradle wrapper
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      # Build and publish to Maven Central
      - name: Build and publish
        run: ./gradlew clean build uploadArchives --no-daemon --stacktrace
        env:
          KEY_ID: ${{ env.KEY_ID }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_HTOKEN }}

      # Clean up GPG keys
      - name: Clean up GPG keys
        run: |
          gpg --batch --yes --delete-secret-keys $KEY_ID
          gpg --batch --yes --delete-keys $KEY_ID
        env:
          KEY_ID: ${{ env.KEY_ID }}
        shell: bash
