name: Publish to Maven Central

on:
  push:
    branches:
      - 3.21.11.1 # Update this to your main branch if needed

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      OSSRH_HTOKEN: ${{ secrets.OSSRH_HTOKEN }}
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Generate a new GPG key pair
      - name: Generate GPG key
        run: |
          echo -e "Key-Type: default\nKey-Length: 2048\nSubkey-Type: default\nName-Real: GitHub Actions\nName-Email: actions@github.com\nExpire-Date: 0\nPassphrase: ${GPG_PASSPHRASE}\n%commit\n%echo done" > gen-key-script
          gpg --batch --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE}" --generate-key gen-key-script
          rm gen-key-script
          gpg --list-secret-keys --keyid-format LONG
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        shell: bash

      # Export the GPG key ID
      - name: Extract GPG key ID
        id: gpg
        run: |
          KEY_ID=$(gpg --list-secret-keys --keyid-format short | grep 'sec' | awk '{print $2}' | cut -d'/' -f2)
          echo "KEY_ID=$KEY_ID" >> $GITHUB_ENV
          echo "$KEY_ID"
        shell: bash

            # Install GPG keyserver support
      - name: Install GPG Keyserver Support
        run: |
          sudo apt-get update
          sudo apt-get install dirmngr

      # Publish GPG key to keyserver
      - name: Publish GPG key to keyserver
        run: |
          gpg --keyserver hkps://keys.openpgp.org --send-keys $KEY_ID

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Configure GPG to use loopback pinentry
      - name: Configure GPG
        run: |
          GPG_DIR=$(gpgconf --list-dirs homedir)   # Get GPG home directory
          ls -lrt $GPG_DIR
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "auto-expand-secmem" >> ~/.gnupg/gpg-agent.conf
          echo "no-ask-cert-level" >> ~/.gnupg/gpg.conf  
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "no-tty" >> ~/.gnupg/gpg.conf  
          gpgconf --kill gpg-agent
        env:
          KEY_ID: ${{ env.KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        shell: bash

      # Set up GPG and secring.gpg for signing
      - name: Create secring.gpg
        run: |
          export GPG_TTY=$(tty)
          gpg --batch --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --export-secret-keys --armor $KEY_ID > ~/.gnupg/secring.gpg
          cp /home/runner/.gnupg/secring.gpg .
          pwd
          ls -lrt
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_TTY: ${{ env.GPG_TTY }}
          KEY_ID: ${{ env.KEY_ID }}


      # Set up Gradle properties
      - name: Set up gradle.properties
        run: |
          mkdir -p ~/.gradle
          echo "GPG_PASSPHRASE is $GPG_PASSPHRASE"
          echo "signing.keyId=${KEY_ID}" >> ~/.gradle/gradle.properties
          echo "signing.password=${GPG_PASSPHRASE}" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.executable=gpg" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.useLegacyGpg=true" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.keyName=${KEY_ID}" >> ~/.gradle/gradle.properties
          echo "signing.gnupg.passphrase=${GPG_PASSPHRASE}" >> ~/.gradle/gradle.properties
          echo "signing.secretKey=$(cat secring.gpg)" >> ~/.gradle/gradle.properties
          echo "signing.secretKeyRingFile=secring.gpg" >> ~/.gradle/gradle.properties
          echo "ossrhUsername=${OSSRH_USERNAME}" >> ~/.gradle/gradle.properties
          echo "ossrhPassword=${OSSRH_PASSWORD}" >> ~/.gradle/gradle.properties
          echo "ossrhToken=${OSSRH_HTOKEN}" >> ~/.gradle/gradle.properties
          cat ~/.gradle/gradle.properties
        env:
          KEY_ID: ${{ env.KEY_ID }}
          OSSRH_HTOKEN: ${{ secrets.OSSRH_HTOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        shell: bash

      # Grant execute permission for Gradle wrapper
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      # Build and publish to Maven Central
      - name: Build and publish
        run: ./gradlew clean build publish publishToMavenCentralPortal --no-daemon --stacktrace
        env:
          KEY_ID: ${{ env.KEY_ID }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_HTOKEN }}
          
